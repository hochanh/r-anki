library(RSQLite)
library(stringr)
sqlite    <- dbDriver("SQLite")
# Import 2 anki database
rtk1.v6 <- dbConnect(sqlite,"rtk1-v6.anki2")
rtk1.full <- dbConnect(sqlite,"rtk1-full.anki2")
sqlite    <- dbDriver("SQLite")
# Import 2 anki database
rtk1.v6 <- dbConnect(sqlite,"rtk1-v6.anki2")
rtk1.full <- dbConnect(sqlite,"rtk1-full.anki2")
full.flds <- dbGetQuery(rtk1.full, "select flds, sfld from notes")
full.flds <- str_split(full.flds[,1], "\037")
full.flds[[1]]
full.flds <- dbGetQuery(rtk1.full, "select flds from notes")
full.flds <- str_split(full.flds[,1], "\037")
full.fld <- dbGetQuery(rtk1.full, "select flds, sfld from notes")
full.fld[5,2]
full.fld[9,2]
full.fld[2200,2]
full.flds[[2200]][2]
full.flds[[2200]][3]
full.note <- matrix(rep(0L,4*2200), ncol=4,
dimnames=list(1:2200,c("v4","v6","flds","sfld")))
for (i in 1:2200) {
full.note[i,1] <- full.flds[[i]][3]
full.note[i,2] <- full.flds[[i]][2]
full.note[i,3] <- full.fld[i,1]
full.note[i,4] <- full.fld[i,2]
}
View(full.note)
v6.v4 <- dbGetQuery(rtk1.v6, "select sfld from notes")
v6.note <- matrix(rep(0L,3*2200), ncol=3,
dimnames=list(1:2200,c("v4","flds","sfld")))
full.note <- matrix(rep(0L,3*2200), ncol=3,
dimnames=list(1:2200,c("v4","flds","sfld")))
for (i in 1:2200) {
full.note[i,1] <- full.flds[[i]][3]
full.note[i,2] <- full.fld[i,1]
full.note[i,3] <- full.fld[i,2]
}
full.note <- as.data.frame(full.note, stringsAsFactors = FALSE)
v6.v4 <- dbGetQuery(rtk1.v6, "select sfld from notes")
v6.note <- matrix(rep(0L,3*2200), ncol=3,
dimnames=list(1:2200,c("v4","flds","sfld")))
for (i in 1:2200) {
note.v4 <- v6.v4[i,1]
v6.note[i,1] <- note.v4
v6.note[i,2] <- full.note[full.note$v4==note.v4, 3]
v6.note[i,3] <- full.note[full.note$v4==note.v4, 4]
}
v6.note <- as.data.frame(v6.note, stringsAsFactors = FALSE)
i
v6.v4[i,1]
full.note[full.note$v4==note.v4, 3]
for (i in 1:2200) {
note.v4 <- v6.v4[i,1]
v6.note[i,1] <- note.v4
v6.note[i,2] <- full.note[full.note$v4==note.v4, 2]
v6.note[i,3] <- full.note[full.note$v4==note.v4, 3]
}
v6.note <- as.data.frame(v6.note, stringsAsFactors = FALSE)
i
full.note[full.note$v4==note.v4, 3]
v6.v4[i,1]
full.flds[[i]][3]
View(full.note)
full.note[full.note$v4==3030,]
str(full.flds)
full.flds[[2200]]
full.note <- matrix(rep(0L,3*2200), ncol=3,
dimnames=list(1:2200,c("v4","flds","sfld")))
for (i in 1:2200) {
full.note[i,1] <- full.flds[[i]][2]
full.note[i,2] <- full.fld[i,1]
full.note[i,3] <- full.fld[i,2]
}
full.note <- as.data.frame(full.note, stringsAsFactors = FALSE)
v6.note <- matrix(rep(0L,3*2200), ncol=3,
dimnames=list(1:2200,c("v4","flds","sfld")))
for (i in 1:2200) {
note.v4 <- v6.v4[i,1]
v6.note[i,1] <- note.v4
v6.note[i,2] <- full.note[full.note$v4==note.v4, 2]
v6.note[i,3] <- full.note[full.note$v4==note.v4, 3]
}
v6.note <- as.data.frame(v6.note, stringsAsFactors = FALSE)
View(`v6.note`)
notes.old <- dbGetQuery(rtk1.v6, "select * from notes")
notes.old[2200,]
v6.note[2200,]
v6.note[2049,]
notes.old[2049,]
notes.old$flds <- v6.note$flds
notes.old$sflds <- v6.note$sfld
notes.old <- dbGetQuery(rtk1.v6, "select * from notes")
notes.new <- notes.old
notes.new$flds <- v6.note$flds
notes.new$sflds <- v6.note$sfld
dbWriteTable(rtk1.anki, "notes", notes.new, overwrite = TRUE)
dbWriteTable(rtk1.v6, "notes", notes.new, overwrite = TRUE)
dbSendQuery(rtk1.v6,
"CREATE TABLE notes_2 (
id              integer primary key,
guid            text not null,
mid             integer not null,
mod             integer not null,
usn             integer not null,
tags            text not null,
flds            text not null,
sfld            integer not null,
csum            integer not null,
flags           integer not null,
data            text not null
);")
dbSendQuery(rtk1.full,
"INSERT INTO notes_2 (id,guid,mid,mod,usn,tags,flds,sfld,csum,flags,data) SELECT id,guid,mid,mod,usn,tags,flds,sfld,csum,flags,data FROM notes;")
dbSendQuery(rtk1.v6,
"INSERT INTO notes_2 (id,guid,mid,mod,usn,tags,flds,sfld,csum,flags,data) SELECT id,guid,mid,mod,usn,tags,flds,sfld,csum,flags,data FROM notes;")
dbSendQuery(rtk1.v6, "DROP TABLE notes")
dbSendQuery(rtk1.v6, "ALTER TABLE notes_2 RENAME TO notes")
dbSendQuery(rtk1.v6, "ALTER TABLE notes RENAME TO notes2")
dbDisconnect(rtk1.full)
dbDisconnect(rtk1.v6)
rtk1.full <- dbConnect(sqlite,"rtk1-full.anki2")
dbSendQuery(rtk1.v6, "CREATE INDEX ix_notes_csum on notes (csum)")
dbSendQuery(rtk1.v6, "CREATE INDEX ix_notes_usn on notes (usn)")
sqlite    <- dbDriver("SQLite")
rtk1.v6 <- dbConnect(sqlite,"rtk1-v6.anki2")
rtk1.full <- dbConnect(sqlite,"rtk1-full.anki2")
dbSendQuery(rtk1.v6, "CREATE INDEX ix_notes_csum on notes (csum)")
dbSendQuery(rtk1.v6, "CREATE INDEX ix_notes_usn on notes (usn)")
dbDisconnect(rtk1.full)
dbDisconnect(rtk1.v6)
sqlite    <- dbDriver("SQLite")
# Import 2 anki database
rtk1.v6 <- dbConnect(sqlite,"rtk1-v6.anki2")
rtk1.full <- dbConnect(sqlite,"rtk1-full.anki2")
# We create a table of rtk1.full database
# with 4 columns: V4, V6, flds, sfld:
full.flds <- dbGetQuery(rtk1.full, "select flds from notes")
full.flds <- str_split(full.flds[,1], "\037")
full.fld <- dbGetQuery(rtk1.full, "select flds, sfld from notes")
full.note <- matrix(rep(0L,3*2200), ncol=3,
dimnames=list(1:2200,c("v4","flds","sfld")))
for (i in 1:2200) {
full.note[i,1] <- full.flds[[i]][2]
full.note[i,2] <- full.fld[i,1]
full.note[i,3] <- full.fld[i,2]
}
full.note <- as.data.frame(full.note, stringsAsFactors = FALSE)
v6.v4 <- dbGetQuery(rtk1.v6, "select sfld from notes")
v6.note <- matrix(rep(0L,3*2200), ncol=3,
dimnames=list(1:2200,c("v4","flds","sfld")))
for (i in 1:2200) {
note.v4 <- v6.v4[i,1]
v6.note[i,1] <- note.v4
v6.note[i,2] <- full.note[full.note$v4==note.v4, 2]
v6.note[i,3] <- full.note[full.note$v4==note.v4, 3]
}
View(`v6.note`)
View(`v6.v4`)
v6.note <- as.data.frame(v6.note, stringsAsFactors = FALSE)
notes.old <- dbGetQuery(rtk1.v6, "select * from notes")
notes.new <- notes.old
notes.new$flds <- v6.note$flds
notes.new$sflds <- v6.note$sfld
View(notes.new)
full.note <- matrix(rep(0L,2*2200), ncol=2,
dimnames=list(1:2200,c("v4","flds")))
for (i in 1:2200) {
full.note[i,1] <- full.split[[i]][2]
full.note[i,2] <- full.flds[i,1]
}
full.note <- as.data.frame(full.note, stringsAsFactors = FALSE)
full.flds <- dbGetQuery(rtk1.full, "select flds from notes")
full.split <- str_split(full.flds[,1], "\037")
full.note <- matrix(rep(0L,2*2200), ncol=2,
dimnames=list(1:2200,c("v4","flds")))
for (i in 1:2200) {
full.note[i,1] <- full.split[[i]][2]
full.note[i,2] <- full.flds[i,1]
}
full.note <- as.data.frame(full.note, stringsAsFactors = FALSE)
notes.old <- dbGetQuery(rtk1.v6, "select * from notes")
notes.new <- notes.old
notes.new$flds <- full.note$flds
dbWriteTable(rtk1.v6, "notes", notes.new, overwrite = TRUE)
dbSendQuery(rtk1.v6,
"CREATE TABLE notes_2 (
id              integer primary key,
guid            text not null,
mid             integer not null,
mod             integer not null,
usn             integer not null,
tags            text not null,
flds            text not null,
sfld            integer not null,
csum            integer not null,
flags           integer not null,
data            text not null)")
dbSendQuery(rtk1.v6,
"INSERT INTO notes_2 (id,guid,mid,mod,usn,tags,flds,sfld,csum,flags,data) SELECT id,guid,mid,mod,usn,tags,flds,sfld,csum,flags,data FROM notes")
dbSendQuery(rtk1.v6, "DROP TABLE notes")
dbDisconnect(rtk1.full)
dbDisconnect(rtk1.v6)
library(RSQLite)
library(stringr)
sqlite    <- dbDriver("SQLite")
# Import 2 anki database
rtk1.v6 <- dbConnect(sqlite,"rtk1-v6.anki2")
rtk1.full <- dbConnect(sqlite,"rtk1-full.anki2")
full.flds <- dbGetQuery(rtk1.full, "select flds from notes")
full.split <- str_split(full.flds[,1], "\037")
full.note <- matrix(rep(0L,2*2200), ncol=2,
dimnames=list(1:2200,c("v4","flds")))
for (i in 1:2200) {
full.note[i,1] <- full.split[[i]][2]
full.note[i,2] <- full.flds[i,1]
}
full.note <- as.data.frame(full.note, stringsAsFactors = FALSE)
notes.old <- dbGetQuery(rtk1.v6, "select * from notes")
i <- 2200
notes.new <- notes.old
notes.new[i, 8]
v4.no <- notes.new[i, 8]
full.note[full.note$v4==v4.no, 2]
notes.new[i, 7]
for (i in 1:2200) {
v4.no <- notes.new[i, 8]
notes.new[i, 7] <- full.note[full.note$v4==v4.no, 2]
}
dbWriteTable(rtk1.v6, "notes_2", notes.new)
dbRemoveTable(rtk1.v6, "notes")
dbSendQuery(rtk1.v6,
"CREATE TABLE notes (
id              integer primary key,
guid            text not null,
mid             integer not null,
mod             integer not null,
usn             integer not null,
tags            text not null,
flds            text not null,
sfld            integer not null,
csum            integer not null,
flags           integer not null,
data            text not null)")
dbSendQuery(rtk1.v6,
"INSERT INTO notes (id,guid,mid,mod,usn,tags,flds,sfld,csum,flags,data) SELECT id,guid,mid,mod,usn,tags,flds,sfld,csum,flags,data FROM notes_2")
dbSendQuery(rtk1.v6, "DROP TABLE notes_2")
dbSendQuery(rtk1.v6, "CREATE INDEX ix_notes_csum on notes (csum)")
dbSendQuery(rtk1.v6, "CREATE INDEX ix_notes_usn on notes (usn)")
library(RSQLite)
library(stringr)
sqlite    <- dbDriver("SQLite")
# Import 2 anki database
rtk1.v6 <- dbConnect(sqlite,"rtk1-v6.anki2")
rtk1.full <- dbConnect(sqlite,"rtk1-full.anki2")
# We create a table of rtk1.full database
# with 4 columns: V4, V6, flds, sfld:
full.flds <- dbGetQuery(rtk1.full, "select flds from notes")
full.split <- str_split(full.flds[,1], "\037")
full.note <- matrix(rep(0L,2*2200), ncol=2,
dimnames=list(1:2200,c("v4","flds")))
for (i in 1:2200) {
full.note[i,1] <- full.split[[i]][2]
full.note[i,2] <- full.flds[i,1]
}
full.note <- as.data.frame(full.note, stringsAsFactors = FALSE)
# Call old note from rtk1-v6
notes.old <- dbGetQuery(rtk1.v6, "select * from notes")
notes.new <- notes.old
for (i in 1:2200) {
v4.no <- notes.new[i, 8]
notes.new[i, 7] <- full.note[full.note$v4==v4.no, 2]
}
library(RSQLite)
library(stringr)
sqlite    <- dbDriver("SQLite")
# Import 2 anki database
rtk1.v6 <- dbConnect(sqlite,"rtk1-v6.anki2")
rtk1.full <- dbConnect(sqlite,"rtk1-full.anki2")
full.flds <- dbGetQuery(rtk1.full, "select flds from notes")
full.split <- str_split(full.flds[,1], "\037")
full.note <- matrix(rep(0L,2*2200), ncol=2,
dimnames=list(1:2200,c("v4","flds")))
for (i in 1:2200) {
full.note[i,1] <- full.split[[i]][2]
full.note[i,2] <- full.flds[i,1]
}
full.note <- as.data.frame(full.note, stringsAsFactors = FALSE)
notes.old <- dbGetQuery(rtk1.v6, "select * from notes")
notes.new <- notes.old
for (i in 1:2200) {
v4.no <- notes.new[i, 8]
notes.new[i, 7] <- full.note[full.note$v4==v4.no, 2]
}
dbWriteTable(rtk1.v6, "notes_2", notes.new)
dbSendQuery(rtk1.v6,
"UPDATE notes
SET (flds) = (SELECT flds
FROM notes_2
WHERE notes.sfld = notes.sfld)")
dbSendQuery(rtk1.v6,
"UPDATE notes
SET flds = (SELECT flds
FROM notes_2
WHERE notes.sfld = notes.sfld);")
dbSendQuery(rtk1.v6, "DROP TABLE notes_2")
# Disconnect
dbDisconnect(rtk1.full)
dbDisconnect(rtk1.v6)
sqlite    <- dbDriver("SQLite")
# Import 2 anki database
rtk1.v6 <- dbConnect(sqlite,"rtk1-v6.anki2")
rtk1.full <- dbConnect(sqlite,"rtk1-full.anki2")
# We create a table of rtk1.full database
# with 4 columns: V4, V6, flds, sfld:
full.flds <- dbGetQuery(rtk1.full, "select flds from notes")
full.split <- str_split(full.flds[,1], "\037")
full.note <- matrix(rep(0L,2*2200), ncol=2,
dimnames=list(1:2200,c("v4","flds")))
for (i in 1:2200) {
full.note[i,1] <- full.split[[i]][2]
full.note[i,2] <- full.flds[i,1]
}
full.note <- as.data.frame(full.note, stringsAsFactors = FALSE)
# Call old note from rtk1-v6
notes.old <- dbGetQuery(rtk1.v6, "select * from notes")
notes.new <- notes.old
for (i in 1:2200) {
v4.no <- notes.new[i, 8]
notes.new[i, 7] <- full.note[full.note$v4==v4.no, 2]
}
# Write table
dbWriteTable(rtk1.v6, "notes_2", notes.new)
dbSendQuery(rtk1.v6,
"UPDATE notes
SET flds = (SELECT flds
FROM notes_2
WHERE notes.sfld = notes.sfld);")
dbSendQuery(rtk1.v6, "DROP TABLE notes_2")
dbDisconnect(rtk1.full)
dbDisconnect(rtk1.v6)
sqlite    <- dbDriver("SQLite")
# Import 2 anki database
rtk1.v6 <- dbConnect(sqlite,"rtk1-v6.anki2")
rtk1.full <- dbConnect(sqlite,"rtk1-full.anki2")
# We create a table of rtk1.full database
# with 4 columns: V4, V6, flds, sfld:
full.flds <- dbGetQuery(rtk1.full, "select flds from notes")
full.split <- str_split(full.flds[,1], "\037")
full.note <- matrix(rep(0L,2*2200), ncol=2,
dimnames=list(1:2200,c("v4","flds")))
for (i in 1:2200) {
full.note[i,1] <- full.split[[i]][2]
full.note[i,2] <- full.flds[i,1]
}
full.note <- as.data.frame(full.note, stringsAsFactors = FALSE)
# Call old note from rtk1-v6
notes.old <- dbGetQuery(rtk1.v6, "select * from notes")
notes.new <- notes.old
for (i in 1:2200) {
v4.no <- notes.new[i, 8]
notes.new[i, 7] <- full.note[full.note$v4==v4.no, 2]
}
# Write table
dbWriteTable(rtk1.v6, "notes_2", notes.new)
dbSendQuery(rtk1.v6,
"UPDATE notes
SET flds = (SELECT notes_2.flds
FROM notes_2
WHERE notes_2.sfld = notes.sfld);")
dbSendQuery(rtk1.v6, "DROP TABLE notes_2")
